#!/bin/bash
set -euo pipefail

# Global color definitions.
cred='\033[0;31m'
cgreen='\033[0;32m'
cyellow='\033[0;33m'
cblue='\033[0;34m'
cmagenta='\033[0;35m'
ccyan='\033[0;36m'
creset='\033[0m'

# pprint prints text with an optional color. Default is magenta.
pprint(){
    local text="$1"
    local color="$2"
    if [ -z "$color" ]; then
        color="$cmagenta"
    else
        case $color in
            "cred")    color="$cred" ;;
            "cgreen")  color="$cgreen" ;;
            "cyellow") color="$cyellow" ;;
            "cblue")   color="$cblue" ;;
            "cmagenta")color="$cmagenta" ;;
            "ccyan")   color="$ccyan" ;;
            *)         color="$cmagenta" ;;
        esac
    fi
    printf "${color}${text}${creset}"
}

# yesnoprompt reads a single character and checks if it starts with 'y' or 'Y'.
yesnoprompt(){
    local old_stty_cfg
    old_stty_cfg=$(stty -g)
    stty raw -echo
    local answer
    answer=$(head -c1)
    stty "$old_stty_cfg"
    echo "$answer" | grep -iq "^y"
}

update(){
    pprint "\n\nUpdating package list... " "ccyan"
    # Update package list quietly.
    sudo apt update > /dev/null 2>&1

    # Check if there are packages to upgrade.
    if apt list --upgradable 2>/dev/null | grep -q upgradable; then
        pprint "UPDATE AVAILABLE\n" "cgreen"
        pprint "Do you want to automatically upgrade (y/n)? " "ccyan"
        if yesnoprompt; then
            pprint "\n\nUpgrading packages... " "ccyan"
            sudo apt upgrade -y > /dev/null 2>&1 && {
                pprint "DONE!\n\n" "cgreen"
            } || {
                pprint "FAIL.\n\n" "cred"
                exit 1
            }
        else
            echo
        fi
    else
        pprint "ALREADY UP TO DATE\n\n" "cgreen"
    fi
}

packages(){
    # Check if pip3 is installed.
    if ! command -v pip3 &>/dev/null; then
        pprint "pip3 not found, installing now... " "cyellow"
        sudo apt install python3-pip -y > /dev/null 2> pypilog.txt && {
            pprint "SUCCESS.\n\n" "cgreen"
        } || {
            pprint "FAIL.\n\n" "cred"
            exit 1
        }
    fi

    # Check for ffmpeg.
    if ! command -v ffmpeg &>/dev/null; then
        pprint "ffmpeg not found, installing now... " "cyellow"
        if sudo apt install ffmpeg -y > /dev/null 2>&1; then
            pprint "SUCCESS.\n\n" "cgreen"
        else
            pprint "FAIL.\n\n" "cred"
            pprint "You need to install ffmpeg manually in order to deploy Tune, exiting...\n" "cblue"
            exit 1
        fi
    fi

    # Check ffmpeg version: warn if it is version 3.x.
    local version
    version=$(ffmpeg -version | head -n 1 | awk '{print $3}')
    if [[ "$version" == 3* ]]; then
        pprint "Warning: Playing live streams might not work since you have ffmpeg version ${version}. Live streams are supported by version 4+.\n" "cblue"
    fi
}

install_node(){
    if command -v npm &>/dev/null; then
        return
    fi
    pprint "Installing Node.js and npm... " "ccyan"
    if curl -fssL https://deb.nodesource.com/setup_19.x | sudo -E bash - > nodelog.txt 2>&1 &&
       sudo apt install -y nodejs >> nodelog.txt 2>&1 &&
       sudo npm install -g npm >> nodelog.txt 2>&1; then
       pprint "SUCCESS!\n" "cgreen"
    else
       pprint "FAIL.\n" "cred"
       exit 1
    fi
}

installation(){
    pprint "\n\nUpgrading pip and installing dependency packages...\n" "ccyan"
    if pip3 install -U pip >> pypilog.txt 2>&1 &&
       pip3 install -U -r requirements.txt >> pypilog.txt 2>&1; then
           pprint "DONE.\n" "cgreen"
    else
           pprint "FAIL.\n" "cred"
           exit 1
    fi
}

display_banner(){
    printf "${cmagenta}"
    cat << "EOF"
████████╗██╗   ██╗███╗   ██╗███████╗
╚══██╔══╝██║   ██║████╗  ██║██╔════╝
   ██║   ██║   ██║██╔██╗ ██║█████╗  
   ██║   ██║   ██║██║╚██╗██║██╔══╝  
   ██║   ╚██████╔╝██║ ╚████║███████╗
   ╚═╝    ╚═════╝ ╚═╝  ╚═══╝╚══════╝
EOF
    printf "${creset}\n"
}

# --- Main Execution ---

clear
display_banner
pprint "\nWelcome to Tune Setup Installer\n\n" "cgreen"
pprint "If you encounter any errors during the installation process, please refer to the logs:\n" "ccyan"
pprint "For Node.js errors, check nodelog.txt\n" "ccyan"
pprint "For Python package errors, check pypilog.txt\n\n" "ccyan"
sleep 1
pprint "This script requires sudo privileges to update & install packages.\n" "ccyan"
sudo -v

update
packages
install_node
installation

pprint "\nTune Installation Completed!\n" "cgreen"
sleep 1
clear

display_banner

# Gather user input with colored prompts.
pprint "\nEnter Your Values Below\n\n" "ccyan"
read -rp "$(printf '%b' "${cblue}API ID:${creset} ")" api_id
read -rp "$(printf '%b' "${cblue}API HASH:${creset} ")" api_hash
read -rp "$(printf '%b' "${cblue}BOT TOKEN:${creset} ")" bot_token
read -rp "$(printf '%b' "${cblue}OWNER ID:${creset} ")" ownid
read -rp "$(printf '%b' "${cblue}MONGO DB URI:${creset} ")" mongo_db
read -rp "$(printf '%b' "${cblue}LOG GROUP ID:${creset} ")" logger
read -rp "$(printf '%b' "${cblue}STRING SESSION:${creset} ")" string_session

pprint "\n\nProcessing your variables, please wait...\n" "cgreen"

# Overwrite (or create) .env file with the provided variables.
cat > .env <<EOF
API_ID=$api_id
API_HASH=$api_hash
BOT_TOKEN=$bot_token
MONGO_DB_URI=$mongo_db
LOGGER_ID=$logger
STRING_SESSION=$string_session
OWNER_ID=$ownid
EOF

clear
pprint "\nThank you for using the Tune installer. Your variables have been saved successfully!\n" "cgreen"
pprint "To add more variables, edit your .env file (e.g., vi .env)\n" "ccyan"
pprint "Now you can start the bot by running: bash start\n\n" "cgreen"
